import tkinter as tk
from tkinter import ttk

# Helper functions
def read_student_data(filename):
    students = []
    with open(filename, 'r') as file:
        lines = file.readlines()

        num_students = int(lines[0].strip())
        for line in lines[1:]:
            parts = line.strip().split(',')
            student_id, name = parts[0], parts[1]
            coursework = list(map(int, parts[2:5]))
            exam = int(parts[5])
            coursework_total = sum(coursework)
            overall_percentage = (coursework_total + exam) / 160 * 100
            grade = calculate_grade(overall_percentage)
            students.append({
                "id": student_id,
                "name": name,
                "coursework_total": coursework_total,
                "exam": exam,
                "percentage": overall_percentage,
                "grade": grade
            })
    return num_students, students

def calculate_grade(percentage):
    if percentage >= 70:
        return 'A'
    elif percentage >= 60:
        return 'B'
    elif percentage >= 50:
        return 'C'
    elif percentage >= 40:
        return 'D'
    else:
        return 'F'

def display_student(record):
    return (f"Name: {record['name']}\n"
            f"Number: {record['id']}\n"
            f"Coursework Total: {record['coursework_total']}\n"
            f"Exam Mark: {record['exam']}\n"
            f"Overall Percentage: {record['percentage']:.2f}%\n"
            f"Grade: {record['grade']}")

def show_all_records():
    output = ""
    total_percentage = 0
    for student in student_records:
        output += display_student(student) + "\n\n"
        total_percentage += student['percentage']
    average_percentage = total_percentage / len(student_records)
    output += f"Number of Students: {num_students}\n"
    output += f"Average Percentage: {average_percentage:.2f}%"
    result_text.delete("1.0", tk.END)
    result_text.insert(tk.END, output)

def show_highest_score():
    highest = max(student_records, key=lambda s: s['percentage'])
    result_text.delete("1.0", tk.END)
    result_text.insert(tk.END, display_student(highest))

def show_lowest_score():
    lowest = min(student_records, key=lambda s: s['percentage'])
    result_text.delete("1.0", tk.END)
    result_text.insert(tk.END, display_student(lowest))

def view_individual_record():
    selected_name = student_combo.get()
    for student in student_records:
        if student['name'] == selected_name:
            result_text.delete("1.0", tk.END)
            result_text.insert(tk.END, display_student(student))
            return
    result_text.delete("1.0", tk.END)
    result_text.insert(tk.END, "Error: Student not found!")

# Read student data
num_students, student_records = read_student_data("studentMarks.txt")

# Create the GUI
root = tk.Tk()
root.title("Student Manager")

# Add title
title_label = tk.Label(root, text="Student Manager", font=("Arial", 24, "bold"))
title_label.grid(row=0, column=0, columnspan=4, pady=20)
title_label.config(anchor="center")

# Buttons
tk.Button(root, text="View All Student Records", command=show_all_records).grid(row=1, column=0, padx=10, pady=10)
tk.Button(root, text="Show Highest Score", command=show_highest_score).grid(row=1, column=1, padx=10, pady=10)
tk.Button(root, text="Show Lowest Score", command=show_lowest_score).grid(row=1, column=2, padx=10, pady=10)

# Dropdown to select individual student
tk.Label(root, text="View Individual Student Record:").grid(row=2, column=0, columnspan=2, pady=10)
student_combo = ttk.Combobox(root, values=[s['name'] for s in student_records])
student_combo.grid(row=2, column=2, pady=10)
tk.Button(root, text="View Record", command=view_individual_record).grid(row=2, column=3, padx=10)

# Text widget to display results
result_text = tk.Text(root, wrap=tk.WORD, height=15, width=80)
result_text.grid(row=3, column=0, columnspan=4, padx=10, pady=10)

# Run the application
root.mainloop()
